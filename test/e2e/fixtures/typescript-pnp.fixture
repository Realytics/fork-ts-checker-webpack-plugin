/// package.json
{
  "name": "typescript-basic-fixture",
  "version": "1.0.0",
  "main": "dist/index.js",
  "license": "MIT",
  "scripts": {
    "webpack-dev-server": "webpack-dev-server"
  },
  "devDependencies": {
    "fork-ts-checker-webpack-plugin": ${FORK_TS_CHECKER_WEBPACK_PLUGIN_VERSION},
    "pnp-webpack-plugin": "^1.6.4",
    "ts-loader": ${TS_LOADER_VERSION},
    "ts-pnp": "^1.2.0",
    "typescript": ${TYPESCRIPT_VERSION},
    "webpack": ${WEBPACK_VERSION},
    "webpack-cli": ${WEBPACK_CLI_VERSION},
    "webpack-dev-server": ${WEBPACK_DEV_SERVER_VERSION}
  },
  "installConfig": {
    "pnp": true
  }
}
/// tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "lib": ["ES6", "DOM"],
    "moduleResolution": "node",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "skipDefaultLibCheck": true,
    "strict": true,
    "baseUrl": "./src",
    "outDir": "./dist"
  },
  "include": ["./src"],
  "exclude": ["node_modules"]
}
/// webpack.config.js
const path = require('path');
const PnpWebpackPlugin = require(`pnp-webpack-plugin`);
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');

module.exports = {
  entry: './src/index.ts',
  output: {
    filename: 'index.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        loader: 'ts-loader',
        exclude: /node_modules/,
        options: {
          ...PnpWebpackPlugin.tsLoaderOptions(),
          transpileOnly: true
        }
      },
    ],
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
    plugins: [
      PnpWebpackPlugin,
    ]
  },
  resolveLoader: {
    plugins: [
      PnpWebpackPlugin.moduleLoader(module),
    ],
  },
  plugins: [
    new ForkTsCheckerWebpackPlugin({
      async: ${ASYNC},
      typescript: {
        extensions: {
          pnp: true
        }
      },
      logger: {
        infrastructure: "console"
      }
    })
  ]
};

/// src/index.ts
import { login } from './authenticate';
import { getUserName } from './model/User';

const emailInput = document.getElementById('email');
const passwordInput = document.getElementById('password');
const loginForm = document.getElementById('login');

if (!emailInput) {
  throw new Error("Cannot find #email input.");
}
if (!passwordInput) {
  throw new Error("Cannot find #password input.");
}
if (!loginForm) {
  throw new Error("Cannot find #login form.");
}

let email = '';
let password = '';

emailInput.addEventListener('change', event => {
  if (event.target instanceof HTMLInputElement) {
    email = event.target.value;
  }
});
passwordInput.addEventListener('change', event => {
  if (event.target instanceof HTMLInputElement) {
    password = event.target.value;
  }
});
loginForm.addEventListener('submit', async event => {
  const user = await login(email, password);

  if (user.role === 'admin') {
    console.log(`Logged in as ${getUserName(user)} [admin].`);
  } else {
    console.log(`Logged in as ${getUserName(user)}`);
  }
});

/// src/authenticate.ts
import { User } from './model/User';

async function login(email: string, password: string): Promise<User> {
  const response = await fetch(
    '/login',
    {
      method: 'POST',
      body: JSON.stringify({ email, password })
    }
  );
  return response.json();
}

async function logout(): Promise<any> {
  const response = await fetch(
    '/logout',
    {
      method: 'POST'
    }
  );
  return response.json();
}

export { login, logout };

/// src/model/User.ts
import { Role } from './Role';

type User = {
  id: string;
  email: string;
  role: Role;
  firstName?: string;
  lastName?: string;
}

function getUserName(user: User): string {
  return [user.firstName, user.lastName]
    .filter(name => name !== undefined)
    .join(' ');
}

export { User, getUserName };

/// src/model/Role.ts
type Role = "admin" | "client" | "provider";

export { Role };
